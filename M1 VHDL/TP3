----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 2023/10/13 06:48:52
-- Design Name: 
-- Module Name: M1TP3 - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity M1TP3 is
    Port ( ReqV : in STD_LOGIC;
           ReqH : in STD_LOGIC;
           clk : in STD_LOGIC;
           MV : out STD_LOGIC;--les piètons verticals marchent
           SV : out STD_LOGIC;--lie piètons verticals stop
           MH : out STD_LOGIC;--les piètons horizontals marchent
           SH: out STD_LOGIC);--les piètons horizontals stop
end M1TP3;

architecture Behavioral of M1TP3 is
    type feuxtype is (RH, YH, VH, RV, YV, VV);
    signal present_feuxH, next_feuxH, present_feuxV, next_feuxV  : feuxtype;
    signal cptH : STD_LOGIC_vector (4 downto 0);
    signal cptV : STD_LOGIC_vector (4 downto 0);
    
begin
    Hor : process(present_feuxH,ReqH,cptH)
    begin
        case present_feuxH is
            when RH => SH <= '1'; MH <= '0';
                if ReqH = '0' then next_feuxH <= VH;
                else next_feuxH <= RH;
                end if;
            when VH => SH <= '0'; MH <= '1';
                if (ReqH = '1'and cptH = "0011") or cptH = "1110" then next_feuxH <= YH;
                else next_feuxH <=VH;
                end if;   
            when YH => SH <='1';MH <='1';
                if cptH = "0010" then next_feuxH <= RH;
                else next_feuxH <=YH;
                end if;
        end case;
    end process Hor;
    Ver : process(present_feuxV, ReqV, cptV)
    begin
        case present_feuxV is
            when RV => SV <= '1'; MV <= '0';
                if ReqV = '0' then next_feuxV <= VV;
                else next_feuxV <= RV;
                end if;
            when VV => SV <= '0'; MV <= '1';
                if (ReqV = '1'and cptV = "0011") or cptV = "1110" then next_feuxV <= YV;
                else next_feuxV <=VV;
                end if;   
            when YV => SV <='1';MV <='1';
                if cptV = "0010" then next_feuxV <= RV;
                else next_feuxV <=YV;
                end if;
        end case;
    end process Ver;
    
    cycleH: process(clk,ReqH)
    begin
            if ReqH = '1'then cptH <="0000";
            elsif (clk'event and clk = '1') then
                    cptH <= cptH + 1; 
end Behavioral;
